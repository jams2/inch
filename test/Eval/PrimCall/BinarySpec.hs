{-# LANGUAGE OverloadedStrings #-}

module Eval.PrimCall.BinarySpec (spec) where

import Eval.Util
import Test.Hspec

spec :: Spec
spec = do
  (runtime, asm, bin) <- runIO (getTestFiles "binary-primcall")
  describe "binary primitive calls" $ do
    let shouldPrint = shouldPrint' runtime asm bin
    it "compiles and runs fx+" $ do
      "(fx+ 1 2)" `shouldPrint` "3\n"
      "(fx+ 1 -2)" `shouldPrint` "-1\n"
      "(fx+ -1 2)" `shouldPrint` "1\n"
      "(fx+ -1 -2)" `shouldPrint` "-3\n"
      "(fx+ 536870911 -1)" `shouldPrint` "536870910\n"
      "(fx+ 536870910 1)" `shouldPrint` "536870911\n"
      "(fx+ -536870912 1)" `shouldPrint` "-536870911\n"
      "(fx+ -536870911 -1)" `shouldPrint` "-536870912\n"
      "(fx+ 536870911 -536870912)" `shouldPrint` "-1\n"
      "(fx+ 1 (fx+ 2 3))" `shouldPrint` "6\n"
      "(fx+ 1 (fx+ 2 -3))" `shouldPrint` "0\n"
      "(fx+ 1 (fx+ -2 3))" `shouldPrint` "2\n"
      "(fx+ 1 (fx+ -2 -3))" `shouldPrint` "-4\n"
      "(fx+ -1 (fx+ 2 3))" `shouldPrint` "4\n"
      "(fx+ -1 (fx+ 2 -3))" `shouldPrint` "-2\n"
      "(fx+ -1 (fx+ -2 3))" `shouldPrint` "0\n"
      "(fx+ -1 (fx+ -2 -3))" `shouldPrint` "-6\n"
      "(fx+ (fx+ 1 2) 3)" `shouldPrint` "6\n"
      "(fx+ (fx+ 1 2) -3)" `shouldPrint` "0\n"
      "(fx+ (fx+ 1 -2) 3)" `shouldPrint` "2\n"
      "(fx+ (fx+ 1 -2) -3)" `shouldPrint` "-4\n"
      "(fx+ (fx+ -1 2) 3)" `shouldPrint` "4\n"
      "(fx+ (fx+ -1 2) -3)" `shouldPrint` "-2\n"
      "(fx+ (fx+ -1 -2) 3)" `shouldPrint` "0\n"
      "(fx+ (fx+ -1 -2) -3)" `shouldPrint` "-6\n"
      "(fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ 1 2) 3) 4) 5) 6) 7) 8) 9)" `shouldPrint` "45\n"
      "(fx+ 1 (fx+ 2 (fx+ 3 (fx+ 4 (fx+ 5 (fx+ 6 (fx+ 7 (fx+ 8 9))))))))" `shouldPrint` "45\n"
    it "compiles and runs fx-" $ do
      "(fx- 1 2)" `shouldPrint` "-1\n"
      "(fx- 1 -2)" `shouldPrint` "3\n"
      "(fx- -1 2)" `shouldPrint` "-3\n"
      "(fx- -1 -2)" `shouldPrint` "1\n"
      "(fx- 536870910 -1)" `shouldPrint` "536870911\n"
      "(fx- 536870911 1)" `shouldPrint` "536870910\n"
      "(fx- -536870911 1)" `shouldPrint` "-536870912\n"
      "(fx- -536870912 -1)" `shouldPrint` "-536870911\n"
      "(fx- 1 536870911)" `shouldPrint` "-536870910\n"
      "(fx- -1 536870911)" `shouldPrint` "-536870912\n"
      "(fx- 1 -536870910)" `shouldPrint` "536870911\n"
      "(fx- -1 -536870912)" `shouldPrint` "536870911\n"
      "(fx- 536870911 536870911)" `shouldPrint` "0\n"
      -- "(fx- 536870911 -536870912)" `shouldPrint` "-1\n"
      "(fx- -536870911 -536870912)" `shouldPrint` "1\n"
      "(fx- 1 (fx- 2 3))" `shouldPrint` "2\n"
      "(fx- 1 (fx- 2 -3))" `shouldPrint` "-4\n"
      "(fx- 1 (fx- -2 3))" `shouldPrint` "6\n"
      "(fx- 1 (fx- -2 -3))" `shouldPrint` "0\n"
      "(fx- -1 (fx- 2 3))" `shouldPrint` "0\n"
      "(fx- -1 (fx- 2 -3))" `shouldPrint` "-6\n"
      "(fx- -1 (fx- -2 3))" `shouldPrint` "4\n"
      "(fx- -1 (fx- -2 -3))" `shouldPrint` "-2\n"
      "(fx- 0 (fx- -2 -3))" `shouldPrint` "-1\n"
      "(fx- (fx- 1 2) 3)" `shouldPrint` "-4\n"
      "(fx- (fx- 1 2) -3)" `shouldPrint` "2\n"
      "(fx- (fx- 1 -2) 3)" `shouldPrint` "0\n"
      "(fx- (fx- 1 -2) -3)" `shouldPrint` "6\n"
      "(fx- (fx- -1 2) 3)" `shouldPrint` "-6\n"
      "(fx- (fx- -1 2) -3)" `shouldPrint` "0\n"
      "(fx- (fx- -1 -2) 3)" `shouldPrint` "-2\n"
      "(fx- (fx- -1 -2) -3)" `shouldPrint` "4\n"
      "(fx- (fx- (fx- (fx- (fx- (fx- (fx- (fx- 1 2) 3) 4) 5) 6) 7) 8) 9)" `shouldPrint` "-43\n"
      "(fx- 1 (fx- 2 (fx- 3 (fx- 4 (fx- 5 (fx- 6 (fx- 7 (fx- 8 9))))))))" `shouldPrint` "5\n"
    it "compiles and runs fx*" $ do
      "(fx* 2 3)" `shouldPrint` "6\n"
      "(fx* 2 -3)" `shouldPrint` "-6\n"
      "(fx* -2 3)" `shouldPrint` "-6\n"
      "(fx* -2 -3)" `shouldPrint` "6\n"
      "(fx* 536870911 1)" `shouldPrint` "536870911\n"
      "(fx* 536870911 -1)" `shouldPrint` "-536870911\n"
      "(fx* -536870912 1)" `shouldPrint` "-536870912\n"
      "(fx* -536870911 -1)" `shouldPrint` "536870911\n"
      "(fx* 2 (fx* 3 4))" `shouldPrint` "24\n"
      "(fx* (fx* 2 3) 4)" `shouldPrint` "24\n"
      "(fx* (fx* (fx* (fx* (fx* 2 3) 4) 5) 6) 7)" `shouldPrint` "5040\n"
      "(fx* 2 (fx* 3 (fx* 4 (fx* 5 (fx* 6 7)))))" `shouldPrint` "5040\n"
    it "compiles and runs fxlogand" $ do
      "(fxlogand 3 7)" `shouldPrint` "3\n"
      "(fxlogand 3 5)" `shouldPrint` "1\n"
      "(fxlogand 2346 (fxlognot 2346))" `shouldPrint` "0\n"
      "(fxlogand (fxlognot 2346) 2346)" `shouldPrint` "0\n"
      "(fxlogand 2376 2376)" `shouldPrint` "2376\n"
    it "compiles and runs fxlogor" $ do
      "(fxlogor 3 16)" `shouldPrint` "19\n"
      "(fxlogor 3 5)" `shouldPrint` "7\n"
      "(fxlogor 3 7)" `shouldPrint` "7\n"
      "(fxlognot (fxlogor (fxlognot 7) 1))" `shouldPrint` "6\n"
      "(fxlognot (fxlogor 1 (fxlognot 7)))" `shouldPrint` "6\n"
    it "compiles and runs fx=" $ do
      "(fx= 12 13)" `shouldPrint` "#f\n"
      "(fx= 12 12)" `shouldPrint` "#t\n"
      "(fx= 16 (fx+ 13 3))" `shouldPrint` "#t\n"
      "(fx= 16 (fx+ 13 13))" `shouldPrint` "#f\n"
      "(fx= (fx+ 13 3) 16)" `shouldPrint` "#t\n"
      "(fx= (fx+ 13 13) 16)" `shouldPrint` "#f\n"
    it "compiles and runs fx<" $ do
      "(fx< 12 13)" `shouldPrint` "#t\n"
      "(fx< 12 12)" `shouldPrint` "#f\n"
      "(fx< 13 12)" `shouldPrint` "#f\n"
      "(fx< 16 (fx+ 13 1))" `shouldPrint` "#f\n"
      "(fx< 16 (fx+ 13 3))" `shouldPrint` "#f\n"
      "(fx< 16 (fx+ 13 13))" `shouldPrint` "#t\n"
      "(fx< (fx+ 13 1) 16)" `shouldPrint` "#t\n"
      "(fx< (fx+ 13 3) 16)" `shouldPrint` "#f\n"
      "(fx< (fx+ 13 13) 16)" `shouldPrint` "#f\n"
    it "compiles and runs fx<=" $ do
      "(fx<= 12 13)" `shouldPrint` "#t\n"
      "(fx<= 12 12)" `shouldPrint` "#t\n"
      "(fx<= 13 12)" `shouldPrint` "#f\n"
      "(fx<= 16 (fx+ 13 1))" `shouldPrint` "#f\n"
      "(fx<= 16 (fx+ 13 3))" `shouldPrint` "#t\n"
      "(fx<= 16 (fx+ 13 13))" `shouldPrint` "#t\n"
      "(fx<= (fx+ 13 1) 16)" `shouldPrint` "#t\n"
      "(fx<= (fx+ 13 3) 16)" `shouldPrint` "#t\n"
      "(fx<= (fx+ 13 13) 16)" `shouldPrint` "#f\n"
    it "compiles and runs fx>" $ do
      "(fx> 12 13)" `shouldPrint` "#f\n"
      "(fx> 12 12)" `shouldPrint` "#f\n"
      "(fx> 13 12)" `shouldPrint` "#t\n"
      "(fx> 16 (fx+ 13 1))" `shouldPrint` "#t\n"
      "(fx> 16 (fx+ 13 3))" `shouldPrint` "#f\n"
      "(fx> 16 (fx+ 13 13))" `shouldPrint` "#f\n"
      "(fx> (fx+ 13 1) 16)" `shouldPrint` "#f\n"
      "(fx> (fx+ 13 3) 16)" `shouldPrint` "#f\n"
      "(fx> (fx+ 13 13) 16)" `shouldPrint` "#t\n"
    it "compiles and runs fx>=" $ do
      "(fx>= 12 13)" `shouldPrint` "#f\n"
      "(fx>= 12 12)" `shouldPrint` "#t\n"
      "(fx>= 13 12)" `shouldPrint` "#t\n"
      "(fx>= 16 (fx+ 13 1))" `shouldPrint` "#t\n"
      "(fx>= 16 (fx+ 13 3))" `shouldPrint` "#t\n"
      "(fx>= 16 (fx+ 13 13))" `shouldPrint` "#f\n"
      "(fx>= (fx+ 13 1) 16)" `shouldPrint` "#f\n"
      "(fx>= (fx+ 13 3) 16)" `shouldPrint` "#t\n"
      "(fx>= (fx+ 13 13) 16)" `shouldPrint` "#t\n"
