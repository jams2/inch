{-# LANGUAGE OverloadedStrings #-}

module Eval.ConstantSpec (spec) where

import Eval.Util
import Test.Hspec

spec :: Spec
spec = do
  (runtime, asm, bin) <- runIO getTestFiles
  describe "Eval" $ do
    let shouldPrint = shouldPrint' runtime asm bin
    it "Evaluates constants" $ do
      "nil" `shouldPrint` "()\n"
      "#t" `shouldPrint` "#t\n"
      "#f" `shouldPrint` "#f\n"
    it "Evaluates fixnums" $ do
      "0" `shouldPrint` "0\n"
      "1" `shouldPrint` "1\n"
      "-1" `shouldPrint` "-1\n"
      "10" `shouldPrint` "10\n"
      "-10" `shouldPrint` "-10\n"
      "2736" `shouldPrint` "2736\n"
      "-2736" `shouldPrint` "-2736\n"
      "536870911" `shouldPrint` "536870911\n"
      "-536870912" `shouldPrint` "-536870912\n"
    it "Evaluates chars" $ do
      "#\\tab" `shouldPrint` "#\\tab\n"
      "#\\newline" `shouldPrint` "#\\newline\n"
      "#\\return" `shouldPrint` "#\\return\n"
      "#\\space" `shouldPrint` "#\\space\n"
      "#\\!" `shouldPrint` "#\\!\n"
      "#\\\"" `shouldPrint` "#\\\"\n"
      "#\\#" `shouldPrint` "#\\#\n"
      "#\\$" `shouldPrint` "#\\$\n"
      "#\\%" `shouldPrint` "#\\%\n"
      "#\\&" `shouldPrint` "#\\&\n"
      "#\\'" `shouldPrint` "#\\'\n"
      "#\\(" `shouldPrint` "#\\(\n"
      "#\\)" `shouldPrint` "#\\)\n"
      "#\\*" `shouldPrint` "#\\*\n"
      "#\\+" `shouldPrint` "#\\+\n"
      "#\\," `shouldPrint` "#\\,\n"
      "#\\-" `shouldPrint` "#\\-\n"
      "#\\." `shouldPrint` "#\\.\n"
      "#\\/" `shouldPrint` "#\\/\n"
      "#\\0" `shouldPrint` "#\\0\n"
      "#\\1" `shouldPrint` "#\\1\n"
      "#\\2" `shouldPrint` "#\\2\n"
      "#\\3" `shouldPrint` "#\\3\n"
      "#\\4" `shouldPrint` "#\\4\n"
      "#\\5" `shouldPrint` "#\\5\n"
      "#\\6" `shouldPrint` "#\\6\n"
      "#\\7" `shouldPrint` "#\\7\n"
      "#\\8" `shouldPrint` "#\\8\n"
      "#\\9" `shouldPrint` "#\\9\n"
      "#\\:" `shouldPrint` "#\\:\n"
      "#\\;" `shouldPrint` "#\\;\n"
      "#\\<" `shouldPrint` "#\\<\n"
      "#\\=" `shouldPrint` "#\\=\n"
      "#\\>" `shouldPrint` "#\\>\n"
      "#\\?" `shouldPrint` "#\\?\n"
      "#\\@" `shouldPrint` "#\\@\n"
      "#\\A" `shouldPrint` "#\\A\n"
      "#\\B" `shouldPrint` "#\\B\n"
      "#\\C" `shouldPrint` "#\\C\n"
      "#\\D" `shouldPrint` "#\\D\n"
      "#\\E" `shouldPrint` "#\\E\n"
      "#\\F" `shouldPrint` "#\\F\n"
      "#\\G" `shouldPrint` "#\\G\n"
      "#\\H" `shouldPrint` "#\\H\n"
      "#\\I" `shouldPrint` "#\\I\n"
      "#\\J" `shouldPrint` "#\\J\n"
      "#\\K" `shouldPrint` "#\\K\n"
      "#\\L" `shouldPrint` "#\\L\n"
      "#\\M" `shouldPrint` "#\\M\n"
      "#\\N" `shouldPrint` "#\\N\n"
      "#\\O" `shouldPrint` "#\\O\n"
      "#\\P" `shouldPrint` "#\\P\n"
      "#\\Q" `shouldPrint` "#\\Q\n"
      "#\\R" `shouldPrint` "#\\R\n"
      "#\\S" `shouldPrint` "#\\S\n"
      "#\\T" `shouldPrint` "#\\T\n"
      "#\\U" `shouldPrint` "#\\U\n"
      "#\\V" `shouldPrint` "#\\V\n"
      "#\\W" `shouldPrint` "#\\W\n"
      "#\\X" `shouldPrint` "#\\X\n"
      "#\\Y" `shouldPrint` "#\\Y\n"
      "#\\Z" `shouldPrint` "#\\Z\n"
      "#\\[" `shouldPrint` "#\\[\n"
      "#\\\\" `shouldPrint` "#\\\\\n"
      "#\\]" `shouldPrint` "#\\]\n"
      "#\\^" `shouldPrint` "#\\^\n"
      "#\\_" `shouldPrint` "#\\_\n"
      "#\\`" `shouldPrint` "#\\`\n"
      "#\\a" `shouldPrint` "#\\a\n"
      "#\\b" `shouldPrint` "#\\b\n"
      "#\\c" `shouldPrint` "#\\c\n"
      "#\\d" `shouldPrint` "#\\d\n"
      "#\\e" `shouldPrint` "#\\e\n"
      "#\\f" `shouldPrint` "#\\f\n"
      "#\\g" `shouldPrint` "#\\g\n"
      "#\\h" `shouldPrint` "#\\h\n"
      "#\\i" `shouldPrint` "#\\i\n"
      "#\\j" `shouldPrint` "#\\j\n"
      "#\\k" `shouldPrint` "#\\k\n"
      "#\\l" `shouldPrint` "#\\l\n"
      "#\\m" `shouldPrint` "#\\m\n"
      "#\\n" `shouldPrint` "#\\n\n"
      "#\\o" `shouldPrint` "#\\o\n"
      "#\\p" `shouldPrint` "#\\p\n"
      "#\\q" `shouldPrint` "#\\q\n"
      "#\\r" `shouldPrint` "#\\r\n"
      "#\\s" `shouldPrint` "#\\s\n"
      "#\\t" `shouldPrint` "#\\t\n"
      "#\\u" `shouldPrint` "#\\u\n"
      "#\\v" `shouldPrint` "#\\v\n"
      "#\\w" `shouldPrint` "#\\w\n"
      "#\\x" `shouldPrint` "#\\x\n"
      "#\\y" `shouldPrint` "#\\y\n"
      "#\\z" `shouldPrint` "#\\z\n"
      "#\\{" `shouldPrint` "#\\{\n"
      "#\\|" `shouldPrint` "#\\|\n"
      "#\\}" `shouldPrint` "#\\}\n"
      "#\\~" `shouldPrint` "#\\~\n"
